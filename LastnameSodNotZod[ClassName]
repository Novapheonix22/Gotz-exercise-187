//Author ANTHONY GOTZ
//Class CPT-187
//START-DATE 4/15/20
//Purpose This is the main class which allows users to purchase items of varying quantities
package edu.cpt187.gotz.participation;

import java.util.Scanner;//import scanner

public class MainClass 
{

	public static final String[] MAIN_MENU_OPTIONS = {"Login", "Create an Account", "Quit"};//main menu constant
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to main menu"};//main menu constant
	public static final String MASTER_FILE_NAME = "MasterOrderFile.dat";//Master file
	public static final String ACCOUNTS_MASTER_FILE_NAME = "MasterUserFile.dat";//Master file
	public static final String[] MENU_CHARS = {"[A] for", "[B] for", "[Q] for"};//main menu char constant
	public static final String[] FILE_MENU_CHARS = {"[A] for", "[B] for", "[R] for"};//main menu char constant
	public static final String[] SUB_MENU_CHARS = {"[A] for", "[B] for", "[C] for"};//sub menu char constant

	public static void main(String[] args) //begin main
	{

		String userName = "";//username variable

		char menuSelection = ' ';//menuselection variable

		Scanner input = new Scanner(System.in);//scanner constructor

		Inventory currentInventory = new Inventory();//inventory constructor

		SodOrder mySodOrder = new SodOrder();//order constructor

		OrderWriter sodOrders = new OrderWriter(MASTER_FILE_NAME);//writer constructor

		UserAccounts currentUser = new UserAccounts(ACCOUNTS_MASTER_FILE_NAME);//user account constructor

		displayWelcomeBanner();//displays welcome banner

		currentUser.setUserAccountsArrays();//loads viable users

		menuSelection = validateMainMenuSelection(input);//modifies main menu

		while(menuSelection != 'Q')//while != 'Q'
		{

			if(menuSelection == 'A')//if menselection == A
			{
				
				currentUser.setSearchedIndex(getUserName(input), getPassword(input));//getuser and pass

				if(currentUser.getSearchedIndex() >= 0 && currentUser.getFileFoundFlag() == true)//account found if
				{
					menuSelection = validateFileMenuSelection(input);//modifies main menu

					while(menuSelection != 'R')//while not return while
					{


						if(menuSelection == 'A')//begin menuselection if
						{

							currentInventory.setLoadItems(getFileName(input));//input

							if(currentInventory.getRecordCount() <= 0)//begin if <= 0
							{

								displayNotOpen();//display void

							}//end  if <= 0

							else//begin else
							{

								mySodOrder.setItemCountArray(currentInventory.getMaxRecords());//setter invoke statement

							}//end else


							menuSelection = validateFileMenuSelection(input);//modifies main menu

						}//end of menuselection if

						else//begin of menuselection else
						{

							currentInventory.setSearchIndex(validateSearchValue(input));//input

							if(currentInventory.getItemSearchIndex() < 0)//begin not found if
							{

								displayNotFound();//display void

							}//end not found if

							else//begin not found else
							{
								//item input
								mySodOrder.setLastItemSelectionIndex(currentInventory.getItemSearchIndex());
								//item selected

								mySodOrder.setItemID(currentInventory.getItemIDs());//setter invoke statement

								mySodOrder.setItemName(currentInventory.getItemNames());//setter invoke statement

								mySodOrder.setItemPrice(currentInventory.getItemPrices());//setter invoke statement

								mySodOrder.setHowMany(validateHowMany(input));//input

								if(mySodOrder.getInStockCounts(currentInventory.getInStockCounts()) < mySodOrder.getHowMany())//begin 
								{

									displayOutOfStock();//display void

								}//end of in stock if

								else//begin in stock else
								{

									mySodOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));//setter invoke statement

									mySodOrder.setDiscountName(currentInventory.getDiscountNames());//setter invoke statement

									mySodOrder.setDiscountRate(currentInventory.getDiscountRates());//setter invoke statement

									mySodOrder.setDecreaseInStock(currentInventory);//setter invoke statement

									mySodOrder.setPrizeName(currentInventory.getRandomNumber(), currentInventory.getPrizeNames());//setter invoke statement

									sodOrders.setWriteOrder(mySodOrder.getItemID(), mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getTotalCost());//setter invoke statement

									if(mySodOrder.getDiscountRate() > 0.0)//begin of if > 0.0
									{

										displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getDiscountName(), mySodOrder.getDiscountRate(), mySodOrder.getDiscountAmt(), mySodOrder.getDiscountPrice(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName(), mySodOrder.getInStockCounts(currentInventory.getInStockCounts()));//display vr

									}//end of if > 0.0

									else// begin of > 0.0 else
									{

										displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getSubTotal(), mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName(), mySodOrder.getInStockCounts(currentInventory.getInStockCounts()));//display vr

									}//end of > 0.0 else 



								}//end in stock else 

							}//end not found else
							menuSelection = validateFileMenuSelection(input);//modifies main menu
						}//end of menuselection else
					}//end while not return while
				}//begin account found else

				else//no account else
				{
					displayNoAccount();

				}//end no account else



			}//end menuselection == A
			else//menuselection == a else
			{
				displayCreateAccount();//create account invoke

				currentUser.setWriteOneRecord(getNewUserName(input), getNewPassword(input));//write account info

				if(currentUser.getFileFoundFlag() == false)//if == false
				{
					displayExistingUserName();//existing user invoke
				}//end if == false
				
				else//else begin
				{
					currentUser.setUserAccountsArrays();//load new account
					
					displayAccountCreated();//account created invoke
				}//end else
			}//end menuselection == A else


			//menu input
			menuSelection = validateMainMenuSelection(input);//modifies main menu

		}//end of while not quit

		if(mySodOrder.getTotalCost() > 0.0)//begin final report if
		{

			currentInventory.setLoadItems(sodOrders.getFileName(), currentInventory.getMaxRecords());//loads final report info

			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantity(), currentInventory.getOrderTotal(), sodOrders.getRecordCount(), mySodOrder.getItemCounts(), currentInventory.getDiscountNames(), mySodOrder.getDiscountCounts(), currentInventory.getPrizeNames(), mySodOrder.getPrizeCounts());//display vr

		}//end final report if

		//farewell
		displayFarewellMessage(userName);//display void

		input.close();//close scanner

	}//end of main

	public static void displayWelcomeBanner()//display welcome banner begin
	{

		System.out.println("Welcome to Sod Not Zod");//print

		System.out.println("This register will allow you to check out.");//print

		System.out.println("Select your items and discount and bim bam boom you're done!");//print

		System.out.println("");//print

		System.out.println("");//print

	}//end welcome banner

	public static void displayUserName()//begin display username
	{
		System.out.println("CASE MATTERS");//println
		System.out.println("");//print
		System.out.println("Please enter your username");//println
	}//end display username
	
	public static void displayPassword()//begin display username
	{
		System.out.println("");//print
		System.out.println("Please enter your password");//println
	}//end display username


	public static void displayAccountCreated()//display account created
	{
		System.out.println("Account successfully created");//println
	}//edn account created
	
	public static void displayExistingUserName()//begin existing user
	{
		System.out.println("Sorry. An account already exists with that username");//println

	}//end existing user

	public static void displayNoAccount()//begin no account
	{
		System.out.println("Your Username and or Password is incorrect");//println
	}//end no account

	public static void displayCreateAccount()//create account display
	{
		System.out.println("Please create a Username and password.");//println
	}//end display create account

	public static void displayEnterFileName()//file name void begin
	{

		System.out.println("Please enter the name and file extrension of the most recent inventory file.");//print

	}//file name void end

	public static void displayNotOpen()//not open void begin
	{

		System.out.println("No file could be found with that name.");//print

	}//not open void end

	public static void displayItemPrompt()//item prompt void begin
	{

		System.out.println("Please enter the Item ID of the item you want.");//print

	}//item promt void end

	public static void displayNotFound()//display not found
	{

		System.out.println("Item Not found");//print

	}//end not found

	public static void displayMainMenu()//display main menu
	{

		int localIndex = 0;//declare and initialize local variables

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~MAIN MENU~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		while(localIndex < MENU_CHARS.length)//begin while
		{

			System.out.printf("%-12s%20s\n", MENU_CHARS[localIndex], MAIN_MENU_OPTIONS[localIndex]);//printf

			localIndex++;//increment counter

		}//end while

		System.out.printf("%-12s", "Choose One: ");//print

	}//end main menu

	public static void displayFileMenu()//display main menu
	{

		int localIndex = 0;//declare and initialize local variables

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~FILE MENU~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		while(localIndex < FILE_MENU_CHARS.length)//begin while
		{

			System.out.printf("%-12s%20s\n", FILE_MENU_CHARS[localIndex], FILE_MENU_OPTIONS[localIndex]);//printf

			localIndex++;//increment counter

		}//end while

		System.out.printf("%-12s", "Choose One: ");//print

	}//end main menu


	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)//display discount menu
	{

		int localIndex = 0;//declare and initialize local variables

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~DISCOUNT MENU~~~~~~~~~~~~~~~~~~~~~~~");//printf

		while(localIndex < SUB_MENU_CHARS.length)//while loop begin
		{

			System.out.printf("%-10s%12s%8s%5.1f\n", SUB_MENU_CHARS[localIndex], borrowedDiscountNames[localIndex] , "%", borrowedDiscountRates[localIndex] * 100);//printf

			localIndex++;//increment counter

		}//end while

		System.out.printf("%-12s", "Choose One: ");//print

	}//end discount menu

	public static void displayHowMany()//display how many
	{

		System.out.println("How many Rolls would you like?");//print

		System.out.println("*Each roll covers 40 sq.ft.");//print

	}//end how many

	public static void displayOutOfStock()//display out of stock
	{

		System.out.println("We don't have that much of that item.");//print

		System.out.println("We appologize.");//print

	}//end out of stock

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)//Display item receipt 1
	{

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~ITEM RECEIPT~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%15s\n", "Sod Type:", borrowedItemName);//printf

		System.out.printf("%-10s%9s%6.2f\n", "Sod Price:", "$", borrowedItemPrice);//printf

		System.out.printf("%-10s%15d\n", "Quantity:", borrowedHowMany);//printf

		System.out.printf("%-10s%15s\n", "Discount:", borrowedDiscountName);//printf

		System.out.printf("%-14s%5s%5.1f\n", "Discount Rate:", "%", borrowedDiscountRate *100);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-16s%3s%6.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);//printf

		System.out.printf("%-15s%4s%6.2f\n", "Discount Price:", "$", borrowedDiscountPrice);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%9s%6.2f\n", "Subtotal:", "$", borrowedSubTotal);//printf

		System.out.printf("%-10s%9s%7.3f\n", "Tax Rate:", "%", borrowedTaxRate);//printf

		System.out.printf("%-10s%9s%6.2f\n", "Tax:", "$", borrowedTax);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%9s%6.2f\n", "Total:", "$", borrowedTotalCost);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%20s\n", "Your Prize:", borrowedPrizeName);//printf

		System.out.printf("%-15s%10d\n", "Amount in stock", borrowedInStockCount);//printf

	}//end receipt 1

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, double borrowedTaxRate, double borrowedTax, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)//display item receipt 2
	{

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~ITEM RECEIPT~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%15s\n", "Sod Type:", borrowedItemName);//printf

		System.out.printf("%-10s%3s%12.2f\n", "Sod Price:", "$", borrowedItemPrice);//printf

		System.out.printf("%-10s%15d\n", "Quantity:", borrowedHowMany);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%3s%12.2f\n", "Subtotal:", "$", borrowedSubTotal);//printf

		System.out.printf("%-10s%3s%13.3f\n", "Tax Rate:", "%", borrowedTaxRate);//printf

		System.out.printf("%-10s%3s%12.2f\n", "Tax:", "$", borrowedTax);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%3s%12.2f\n", "Total:", "$", borrowedTotalCost);//printf

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%20s\n", "Your Prize:", borrowedPrizeName);//printf

		System.out.printf("%-15s%10d\n", "Amount in stock", borrowedInStockCount);//printf

	}//end receipt 2

	public static void displayFinalReport(int[] borrowedItemID, String[] borrowedItemName, double[] borrowedItemPrice, int[] borrowedOrderQuantity, double[] borrowedOrderTotal, int borrowedRecordCount, int[] borrowedItemCount, String[] borrowedDiscountName, int[] borrowedDiscountCount, String[] borrowedPrizeName, int[] borrowedPrizeCount)//display final report
	{
		
		double localTotal = 0;

		int localIndex = 0;//declare and initialize local variables

		System.out.printf("%-60s\n", "~~~~~~~~~~~~~~~~~~~~~~~~~FINAL REPORT~~~~~~~~~~~~~~~~~~~~~~~");//printf

		System.out.printf("%-10s%13s%15s%4s%12s\n", "ITEM ID", "ITEM NAME", "ITEM PRICE", "QTY", "TOTAL");//printf

		while(localIndex < borrowedItemCount.length)//begin item count while prints
		{
			if(borrowedItemName[localIndex] == null)//if name == to null stop print
			{
				localIndex = borrowedItemCount.length;//assignment statement
			}//end of if == null
			else//begin null else
			{
				localTotal = localTotal + borrowedOrderTotal[localIndex];//calculation
				
				System.out.printf("%-3d%20s%5s%8.2f%5d%5s%8.2f\n", borrowedItemID[localIndex], borrowedItemName[localIndex], "$", borrowedItemPrice[localIndex], borrowedOrderQuantity[localIndex], "$", borrowedOrderTotal[localIndex]);//printf

				localIndex++;//increment counter
			}//end null selection structure
		}//end item count while prints

		localIndex = 0;//assignment statement

		System.out.println("");//println

		System.out.printf("%-12s%20s\n", "RECORD COUNT", "ORDER TOTAL");//printf

		System.out.printf("%-5d%18s%8.2f\n", borrowedRecordCount, "$", localTotal);//printf


		localIndex = 0;//assignment statement

		System.out.println("");//println

		while(localIndex < borrowedDiscountName.length)//begin item count while prints
		{

			System.out.printf("%-20s%10d\n", borrowedDiscountName[localIndex], borrowedDiscountCount[localIndex]);//printf

			localIndex++;//increment counter

		}//end item count while prints

		localIndex = 0;//assignment Statement

		System.out.println("");//println

		while(localIndex < borrowedPrizeName.length)//begin item count while prints
		{

			System.out.printf("%-20s%10d\n", borrowedPrizeName[localIndex], borrowedPrizeCount[localIndex]);//printf

			localIndex++;//increment counter

		}//end item count while prints

		System.out.print("");//printf

		System.out.print("");//printf

	}//end final report

	public static void displayFarewellMessage(String borrowedUserName)//begin farewell void
	{

		System.out.println("");//print

		System.out.println("");//print

		System.out.println("Thankyou for shopping with us today " + borrowedUserName + ".");//print

		System.out.println("Please bring the receipt to the collection window.");//print

		System.out.println("We will get you items to you shortly.");//print

		System.out.println("Have a great day.");//print

	}//end farewell void
	//end of voids
	//Begin VRs
	public static String getUserName(Scanner borrowedInput)//get username
	{

		String localUserName = "";//declare and initialize local variables

		displayUserName();//login prompt
		
		localUserName = borrowedInput.next();//input

		return localUserName;//return statement

	}//end get username

	public static String getPassword(Scanner borrowedInput)//get username
	{

		String localPass = "";//declare and initialize local variables

		displayPassword();//login prompt
		
		localPass = borrowedInput.next();//input

		return localPass;//return statement

	}//end get username

	public static String getNewUserName(Scanner borrowedInput)//get username
	{

		String localUserName = "";//declare and initialize local variables

		localUserName = borrowedInput.next();//input

		return localUserName;//return statement

	}//end get username

	public static String getNewPassword(Scanner borrowedInput)//get username
	{

		String localPass = "";//declare and initialize local variables

		localPass = borrowedInput.next();//input

		return localPass;//return statement

	}//end get username

	public static String getFileName(Scanner borrowedInput)//get file name
	{

		String localFileName = "";//declare and initialize local variables

		displayEnterFileName();//display void

		localFileName = borrowedInput.next();//input

		return localFileName;//return statement

	}//end get file name

	public static char validateMainMenuSelection(Scanner borrowedInput)//validate menu selection vr
	{

		char localMenuSelection = ' ';//declare and initialize local variables

		displayMainMenu();//display void

		localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);//input

		while(localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'Q')//begin while
		{

			System.out.println("ERROR. PLEASE SELECT A VALID OPTION.");//error message

			displayMainMenu();//display void

			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);//input

		}//end while

		return localMenuSelection;//return statement

	}//end menu selection

	public static char validateFileMenuSelection(Scanner borrowedInput)//validate menu selection vr
	{

		char localMenuSelection = ' ';//declare and initialize local variables

		displayFileMenu();//display void

		localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);//input

		while(localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'R')//begin while
		{

			System.out.println("ERROR. PLEASE SELECT A VALID OPTION.");//error message

			displayFileMenu();//display void

			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);//input

		}//end while

		return localMenuSelection;//return statement

	}//end menu selection

	public static int validateSearchValue(Scanner borrowedInput)//validate search value vr
	{

		int localTargetID = 0;//declare and initialize local variables

		displayItemPrompt();//display void

		localTargetID = borrowedInput.nextInt();//input

		while(localTargetID <= 0)//begin while
		{

			System.out.println("ERROR. PLEASE ENTER A VALUE GREATER THAN 0.");//error message

			displayItemPrompt();//display void

			localTargetID = borrowedInput.nextInt();//input

		}//end while

		return localTargetID;//return statement

	}//end validate search value

	public static int validateHowMany(Scanner borrowedInput)//validate how many vr
	{

		int localHowMany = 0;//declare and initialize local variables

		displayHowMany();//display void

		localHowMany = borrowedInput.nextInt();//input

		while(localHowMany <= 0)//begin while
		{

			System.out.println("ERROR. PLEASE SELECT AN AMOUNT GREATER THAN 0.");//error message

			displayHowMany();//display void

			localHowMany = borrowedInput.nextInt();//input

		}//end while

		return localHowMany;//return statement

	}//end validate how many


	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)//validate discount vr
	{

		char localMenuSelection = ' ';//declare and initialize local variables

		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);//display void

		localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);//input

		while(localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'C')//begin while
		{

			System.out.println("ERROR. PLEASE SELECT A VALID OPTION.");//error message

			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);//display void

			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);//input

		}//end while

		return localMenuSelection;//return statement

	}//end validate dicount
	//end of VRs

}//end of class
